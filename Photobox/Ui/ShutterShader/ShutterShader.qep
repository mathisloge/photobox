{
    "QEP": {
        "QQEM": "0.43",
        "connections": [
            {
                "fromId": 0,
                "toId": 2
            },
            {
                "fromId": 2,
                "toId": 1
            }
        ],
        "exportDirectory": ".",
        "exportFlags": 11,
        "exportName": "ShutterShader",
        "nodes": [
            {
                "fragmentCode": [
                    "void main() {",
                    "    fragColor = texture(iSource, texCoord);",
                    "    @nodes",
                    "    fragColor = fragColor * qt_Opacity;",
                    "}"
                ],
                "name": "Main",
                "nodeId": 0,
                "type": 0,
                "vertexCode": [
                    "void main() {",
                    "    texCoord = qt_MultiTexCoord0;",
                    "    fragCoord = qt_Vertex.xy;",
                    "    vec2 vertCoord = qt_Vertex.xy;",
                    "    @nodes",
                    "    gl_Position = qt_Matrix * vec4(vertCoord, 0.0, 1.0);",
                    "}"
                ],
                "x": 248,
                "y": 48
            },
            {
                "name": "Output",
                "nodeId": 1,
                "type": 1,
                "x": 248,
                "y": 832
            },
            {
                "description": "This is an empty node for creating custom effects.",
                "fragmentCode": [
                    "#define PI 3.1415926535",
                    "",
                    "vec2 orto(vec2 pv)",
                    "{",
                    "    return normalize(vec2(-pv.y, pv.x));",
                    "}",
                    "",
                    "vec2 rot(vec2 p, float a)",
                    "{",
                    "    float ca = cos(a);",
                    "    float sa = sin(a);",
                    "    return vec2(ca*p.x - sa*p.y, ca*p.y + sa*p.x);",
                    "}",
                    "",
                    "float sCircle(vec2 p, float r)",
                    "{",
                    "    float ds = 0.01*r;",
                    "    return smoothstep(-ds, ds , r*r - dot(p,p));",
                    "}",
                    "",
                    "",
                    "float sTriangle(vec2 p, vec2 p1, vec2 p2, vec2 p3)",
                    "{",
                    "    float ds = 0.005;",
                    "    vec3 dsv = vec3(ds, ds, ds);",
                    "    vec3 pev = vec3(dot( orto(p2 - p1), p - 0.5*(p1 + p2)), ",
                    "                   \tdot( orto(p3 - p2), p - 0.5*(p2 + p3)),",
                    "        \t\t\tdot( orto(p1 - p3), p - 0.5*(p3 + p1)));",
                    "    vec3 S = smoothstep(dsv, -dsv, pev);",
                    "    return S.x*S.y*S.z;",
                    "}",
                    "",
                    "",
                    "@main",
                    "{",
                    "\tvec2 uv = 2.0 * fragCoord.xy / iResolution.xy - 1.0;",
                    "    uv.x *= iResolution.x/iResolution.y;",
                    "    uv *= 1.0;",
                    "  ",
                    "    // Colors",
                    "\tvec3 blue  = vec3(50.0, 50.0, 50.0)/255.0;",
                    "    vec3 white = vec3(1, 1, 1); ",
                    "    vec3 gray = 0.8*vec3(0.1, 0.1, 0.1);",
                    "    vec3 black = vec3(0.0, 0.0, 0.0);",
                    "    vec3 brown = 0.01*vec3(128.0, 128.0, 128.0)/255.0 + 0.05*white;",
                    "    ",
                    "    // Parameters",
                    "\tint N = 50;  \t\t// Change this to for example 100 ;)    ",
                    "    float L = 1.2;",
                    "    float sft = 0.1;",
                    "    ",
                    "    // Derived Parameters",
                    "    float alpha = PI/float(N);",
                    "    float dw = L*tan(alpha);",
                    "    float R = L - sft;",
                    "    vec2 shift = vec2(0.0, sft);",
                    "    ",
                    "    // Blade reference vertices (triangle)",
                    "    vec2 p1 = vec2(0.0, L) - shift;",
                    "    vec2 p2 = vec2( dw, 0.0) - shift;",
                    "    vec2 p3 = vec2(-dw, 0.0) - shift;",
                    "  ",
                    "    // Parameterization for the animation",
                    "    float A = 0.45;",
                    "    float B = 1.55;",
                    "    float st = 0.5*(A + B) + 0.5*(B-A)*tanh(2.0*sin(4*(iTime + 1.3)));",
                    "",
                    "",
                    "    // Shading",
                    "    float blades = 0.0; ",
                    "    float nails = 0.0;",
                    "    ",
                    "    float inner = 0;",
                    "   \tfor (int i = 0; i < N; i++)",
                    "    {",
                    "        float a = 2.0*PI*float(i)/float(N);",
                    "       \t",
                    "        vec2 p = R*vec2(cos(a), sin(a));",
                    "        ",
                    "        blades += sTriangle(uv, ",
                    "                            rot(p1, a + st) + p, ",
                    "                            rot(p2, a + st) + p, ",
                    "                            rot(p3, a + st) + p);",
                    "        ",
                    "    \tnails += sCircle(uv - p, 0.015);   ",
                    "           ",
                    "        vec2 ip = (R*1.5) * vec2(cos(a), sin(a));",
                    "        inner += sCircle(uv - ip, st);",
                    "    }",
                    "    ",
                    "    float dR = 0.135;",
                    "    float sRing = sCircle(uv, R + dR) - sCircle(uv, R - dR);",
                    "    //sRing = 0.0;  //uncomment to remove ring",
                    "    ",
                    "    vec3 c = gray;",
                    "    c += (blue - gray)*(blades - sRing*blades) + (brown)*(sRing-nails) + blue*nails;",
                    "    if(blades > 0 || sRing > 0 || inner > 0) {",
                    "        fragColor = vec4(c, 1.0);",
                    "    }",
                    "}"
                ],
                "name": "Custom",
                "nodeId": 2,
                "type": 2,
                "x": 213,
                "y": 451.9146423339844
            }
        ],
        "version": 1
    }
}
